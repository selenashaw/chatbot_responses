{
  "courselink":"https://www.cs.princeton.edu/courses/archive/fall21/cos126/",
  "assignments": [
    {
      "name": "Hello World", 
      "LINK": "assignments/hello/",
      "parts": [
        {
          "part_name": "HelloWorld",
          "tests": [
            {
              "test_number": "1",
              "description":"Check output format.",
              "hint": ""
            },
            {
              "test_number": "2",
              "description":"Check correctness.",
              "hint": ""
            }
          ]
        },
        {
          "part_name": "HiFour",
          "tests": [
            {
              "test_number": "0a",
              "description":"Check formatting of inputs from assignment specification.",
              "hint": ""
            },
            {
              "test_number": "0b",
              "description":"Check correctness of inputs from assignment specification.",
              "hint": ""
            },
            {
              "test_number": "1",
              "description":"Various names.",
              "hint":""
            },
            {
              "test_number": "2",
              "description":"All the same name.",
              "hint":""
            },
            {
              "test_number": "3",
              "description":"Command-line arguments are the same as their reverse.",
              "hint":""
            },
            {
              "test_number": "4",
              "description":"All permutations of four names.",
              "hint":""
            }
          ]
        },
        {
          "part_name": "Ordered",
          "tests": [
            {
              "test_number": "0a",
              "description":"Check formatting of inputs from assignment specification.",
              "hint": ""
            },
            {
              "test_number": "0b",
              "description":"Check correctness of inputs from assignment specification.",
              "hint": ""
            },
            {
              "test_number": "1",
              "description":"Inputs that are strictly ascending.",
              "hint":""
            },
            {
              "test_number": "2",
              "description":"Inputs that are strictly descending.",
              "hint":""
            },
            {
              "test_number": "3",
              "description":"Inputs that are neither strictly ascending nor descending.",
              "hint":""
            },
            {
              "test_number": "4",
              "description":"Inputs with duplicate values.",
              "hint":""
            },
            {
              "test_number": "5",
              "description":"Corner cases.",
              "hint":""
            },
            {
              "test_number": "6",
              "description":"Random inputs with distinct values.",
              "hint":""
            },
            {
              "test_number": "7",
              "description":"Random inputs with duplicate values.",
              "hint":""
            },
            {
              "test_number": "8",
              "description":"Random inputs susceptible to integer overflow.",
              "hint":""
            }
          ]
        },
        {
          "part_name": "GreatCircle",
          "tests": [
            {
              "test_number": "0a",
              "description":"Check formatting of inputs from assignment specification.",
              "hint": ""
            },
            {
              "test_number": "0b",
              "description":"Check correctness of inputs from assignment specification.",
              "hint": ""
            },
            {
              "test_number": "1",
              "description":"Fixed inputs.",
              "hint": ""
            },
            {
              "test_number": "2",
              "description":"Corner cases.",
              "hint": ""
            },
            {
              "test_number": "3",
              "description":"Random Inputs.",
              "hint": ""
            },
            {
              "test_number": "4",
              "description":"Check that results for (x1, y1, x2, y2) and (x2, y2, x1, y2) are equal.",
              "hint": ""
            }
          ]
        },
        {
          "part_name": "RGBtoCMYK",
          "tests": [
            {
              "test_number": "0a",
              "description":"Check formatting of inputs from assignment specification.",
              "hint": ""
            },
            {
              "test_number": "0b",
              "description":"Check correctness of inputs from assignment specification.",
              "hint": ""
            },
            {
              "test_number": "1",
              "description":"Various inputs.",
              "hint": ""
            },
            {
              "test_number": "2",
              "description":"Corner cases.",
              "hint": ""
            },
            {
              "test_number": "3",
              "description":"Random inputs.",
              "hint": ""
            }
          ]
        }
      ]
    },
    {
      "name":"Loops & Conditionals",
      "LINK": "assignments/loops/",
      "parts": [
        {
          "part_name":"Bits",
          "tests": [
            {
              "test_number": "0a",
              "description":"Check formatting of inputs from assignment specification.",
              "hint":"Checks some general outputs for formatting, will fail if outputs are formatted improperly, or cases of bits == 0 or bits < 0 are not handled correctly (no line should be printed for 0, error should be printed for negative bits). Check conditionals in the main method of Bits and see following tests for more details.\n(May see some fail test for error message if they print more than just the error message - check for missing if-else logic in main method.)"
            },
            {
              "test_number": "0b",
              "description":"Check correctness of inputs from assignment specification.",
              "hint":"Checks some general outputs for correctness, will fail if calculations of binary number is incorrect, or cases of bits == 0 or bits < 0 are not handled correctly (no line should be printed for 0, error should be printed for negative bits). Check conditionals in the main method of Bits and see following tests for more details.\n(May see some fail test for error message if they print more than just the error message - check for missing if-else logic in main method.)"
            },
            {
              "test_number": "1",
              "description":"Check when n is a power of 2.",
              "hint":"Check the binary-conversion logic correctness. If this fails, most likely the test below fails as well. Check the logic of the while loop in the main method of Bits used for calculating and outputting the binary digits."
            },
            {
              "test_number":"2",
              "description":"Check when n is not a power of 2.",
              "hint":"Check the binary-conversion logic correctness. If this fails, most likely the test above fails as well, otherwise the student may have failed to recognize cases when n/2^k is 1 (unlikely). Check the logic of the while loop in the main method of Bits used for calculating and outputting the binary digits."
            },
            {
              "test_number": "3",
              "description":"Check when n is a corner case.",
              "hint":"Checks corner cases, 0 and 2147483647 (overflow). If this fails, check the handling of the case n = 0 in the main method of Bits."
            },
            {
              "test_number": "4",
              "description":"Check when n is negative.",
              "hint":"Checks that the student correctly handles illegal inputs. Should print \"Illegal input\" and nothing else. Some students may fail this test if they check for illegal inputs but then do not return or something similar and place a while loop after that statement with no check for n >= 0. Check conditional logic for n < 0 in the main method of Bits."
            },
            {
              "test_number":"5",
              "description":"Check for random n.",
              "hint":"Stress testing (if this is failing it likely is being more specifically tested somewhere else -- refer to previous tests)."
            }
          ]
        },
        {
          "part_name":"NoonSnooze",
          "tests": [
            {
              "test_number": "0a",
              "description":"Check formatting of inputs from assignment specification.",
              "hint":"This test checks various formatting issues (not in format XX:YYam/pm, missing two digits for minutes etc.). See following tests for more details. Check main() in NoonSnooze for incorrect formatting in print statements, or faulty logic in conditionals for corner cases."
            },
            {
              "test_number": "0b",
              "description":"Check correctness of inputs from assignment specification.",
              "hint":"This test checks various formatting issues (not in format XX:YYam/pm, missing two digits for minutes etc.). See following tests for more details. Check main() in NoonSnooze for incorrect formatting in print statements, or faulty logic in conditionals for corner cases."
            },
            {
              "test_number": "1",
              "description":"Inputs between 0 and 12 hours.",
              "hint":"Checks pm correctness. Possible errors include having 0:10pm instead of 12:51pm, incorrectly reasoning about am and pm, etc. Check conditionals in the main() method of NoonSnooze pertaining to pm and the edge case of hours being a multiple of 12."
            },
            {
              "test_number": "2",
              "description":"Inputs between 12 and 13 hours.",
              "hint":"Checks 12:XXam correctness (the transition between pm and am). Check conditionals in the main method of NoonSnooze pertaining the case where snooze / 60 % 24 == 12 (hours are between 12 and 13)."
            },
            {
              "test_number": "3",
              "description":"Inputs between 13 and 24 hours.",
              "hint":"Checks am correctness. Possible errors include having 0:10am instead of 12:51am, incorrectly reasoning about am and pm, etc. Check conditionals in the main method of NoonSnooze pertaining to am and the edge case of hours being a multiple of 12."
            },
            {
              "test_number": "4",
              "description":"Inputs between 24 and 25 hours.",
              "hint":"Checks 12:XXpm correctness (the transition between am and pm). Errors may include improperly using am vs. pm or printing 0:XXpm instead of 12:XXpm (not considering that multiple of 24 % 24 is 0 but we want 0 to be 12 on the clock). Check conditionals in the main method of NoonSnooze pertaining the case where snooze / 60 % 24 == 0 (hours are between 24 and 25)."
            },
            {
              "test_number":"5",
              "description":"Inputs between 25 and 48 hours.",
              "hint":"Checks correctness for inputs beyond one day. Checks modular logic. Look in the main method of NoonSnooze for possible errors with using % (i.e. not using % 24)."
            },
            {
              "test_number": "6",
              "description":"Inputs whose number of minutes is less than 10.",
              "hint":"Checks that the student properly checked and accounted for the edge case where minutes is less than 10. The student should have printed an extra 0 before printing minutes to ensure a format of XX:YYam/pm instead of printing something like 12:3pm. Look in the main method of NoonSnooze for a missing conditional check."
            },
            {
              "test_number": "7",
              "description":"Corner cases.",
              "hint":"Checks 12:00am/12:00pm various cases, testing the logic of transition between am and pm, and formatting of snooze / 60 % 24 = 0 cases (should be 12:00pm).\nWhen snooze / 60 % 24 >= 12, should switch to am, then back when 0. Check conditionals in main of NoonSnooze pertaining to cases of the hour being a multiple of 12."
            },
            {
              "test_number": "8",
              "description":"Random inputs.",
              "hint":"Stress testing (if this is failing it likely is being more specifically tested somewhere else -- refer to previous tests)."
            }  
          ]
        },
        {
          "part_name": "Random Walker",
          "tests": [
            {
              "test_number": "0a",
              "description":"Check formatting of inputs from assignment specification.",
              "hint":"Checks that the number of lines printed is correct, and that the final print statement giving the mean squared distance is formatted correctly. If there is an issue with the formatting of the print statement, check the final print statement in the main method of RandomWalker for formatting or logic errors (not parenthesizing calculations etc.). If there is an incorrect number of lines, see tests 0b and 1, this may be caused by not printing the starting or ending point. Check that the student prints the origin before entering the loop, or handles both the start and the end in some way."
            },
            {
              "test_number": "0b",
              "description":"Check correctness of inputs from assignment specification.",
              "hint":"Checks that the inputs outputted are correct (start at the origin, mean squared distance reported by student is consistent with points printed, etc.) If the student does not start at the origin, check before and at the beginning of the loop in the main method of RandomWalker to see if the student prints before taking any steps (also see test 1). If the mean squared distance is not correct, check where the calculation is done near the end of the main method (before or in the final print statement). (If there was a formatting error also i.e. distance being 09 instead of an integer, this may be a concatenation/calculation problem with parentheses.)"
            },
            {
              "test_number": "1",
              "description":"Check number of steps in random walk.",
              "hint":"Checks that the student takes the proper number of steps based on the argument. Check the bounds of the loop in main of RandomWalker, as well as check that both the starting point and the ending point are printed (one of these will have to be handled outside the loop most likely). See test 2 for the case of the starting point (should be the origin) not being printed."
            },
            {
              "test_number": "2",
              "description":"Check that first point in random walk is the origin.",
              "hint":"Checks that the student prints the origin. (The student may make a mistake of not starting at the origin so check the starting point assigned at the top of the main method of RandomWalker, but it is more likely the student just forgot to print the origin before walking.) Check the logic at the begininning/before entering the loop."
            },
            {
              "test_number": "3",
              "description":"Check that successive points in random walk are neighbors.",
              "hint":"As the RandomWalker can only move one block forward, backward, or sideways at a time, blocks visited successively must be neighbors. If this fails, check the conditional logic and random number generation within the loop of the main method of RandomWalker. Possible error: The student should generate a random number and then save it and use it for all the conditional checks, not generate a new random number for each check."
            },
            {
              "test_number": "4",
              "description":"Check that squared distance is consistent with last point in walk.",
              "hint":"Checks that the student calculates the mean squared distance correctly, and/or remembers to print the final position. If either one of these doesn't happen this will fail. Check test 1 for possible missing steps. If the student has the origin, they are likely missing the last step. If they have all steps, check calculation of mean squared (in or near the last print statement in the main of RandomWalker -- if it is done in this may be an error with concatenation, see formatting test 0a and correctness test 0b). If the endpoint is (x,y), the dist squared should be xx + yy."
            },
            {
              "test_number": "5",
              "description":"Check correctness for corner cases.",
              "hint":"Checks correctness of walks of 0 and 1 steps. If this fails, check for off-by-one errors in the first loop in the main method of RandomWalker. If test 4 also failed, this may be a printing concatenation/calculation error. Check in or before the final print statement in the main method for calculation errors."
            },
            {
              "test_number": "6",
              "description":"Check that program produces different walks each time.",
              "hint":"Checks that the walks are indeed random. Each walk should be unique if this is true. If this fails, check to see if the student hard coded something for determining steps instead of calling the Math.random() in the main loop in the main method of RandomWalker."
            },
            {
              "test_number": "7",
              "description":"Check randomness of individual steps in walk.",
              "hint":"Checks that the steps within a walk are indeed random. If this fails, check to see if the student hard coded something for determining steps instead of calling the Math.random() in the main loop in the main method of RandomWalker. This may also signal an error in their generation and use of a random number. Check the conditionals pertaining to probability within the main loop."
            },
            {
              "test_number": "8",
              "description":"Check randomness of mean squared distances.",
              "hint":"Checks that for different walks of the same step length, the final distance is random. If this fails, check that the student has not hard coded part of the walk in the main loop of the main method of Random Walker. More likely, the student has made some error calculating the mean squared distance. See test 4."
            },
            {
              "test_number": "9",
              "description":"Check what happens when math.random() always returns the same value.",
              "hint":"The walk should move only in one direction if the student has handled Math.random() correctly. If the student fails this test, most likely they are failing some other more specific test (possibly missing the origin as the first point in their path). Check previous tests for more details."
            }
          ]
        },
        {
          "part_name": "Random Walkers",
          "tests" :[
            {
              "test_number": "0a",
              "description":"Check formatting of inputs from assignment specification.",
              "hint":"Checks that the student formats output correctly. Should be \"mean squared distance = <double>\". If this fails, check the formatting of the final print statement in the main method of RandomWalkers for typos."
            },
            {
              "test_number": "0b",
              "description":"Check mean squared distance of inputs from assignment specification.",
              "hint":"This test tests that the student solution falls in the expected range of solutions. Failure in this test suggest some major calculation error while calculating the mean. Possible errors include not resetting values that need to be reset for each trial (or alternatively resetting the total sum after each trial when it should accumulate). Check calculations in the trial loop of the main method of RandomWalkers, especially how the student handles accumulating the results of many trials."
            },
            {
              "test_number": "1",
              "description":"Check mean squared distance.",
              "hint":"This test tests that the student solution falls in the expected range of solutions. Failure in this test suggest some major calculation error while calculating the mean. Possible errors include not resetting values that need to be reset for each trial (or alternatively resetting the total sum after each trial when it should accumulate). Check calculations in the trial loop of the main method of RandomWalkers, especially how the student handles accumulating the results of many trials."
            },
            {
              "test_number": "2",
              "description":"Check mean squared distance when n = trials.",
              "hint":"This test tests that the student solution falls in the expected range of solutions. Failure in this test suggest some major calculation error while calculating the mean. Possible errors include not resetting values that need to be reset for each trial (or alternatively resetting the total sum after each trial when it should accumulate). Check calculations in the trial loop of the main method of RandomWalkers, especially how the student handles accumulating the results of many trials."
            },
            {
              "test_number": "3",
              "description":"Check mean squared distance when n = 0.",
              "hint":"Checks that for 0 steps, the mean squared distance outputted is zero. If this fails, check the inner loop logic in the main method of RandomWalkers for an off-by-one error."
            },
            {
              "test_number": "4",
              "description":"Check that mean squared distance is not always an integer.",
              "hint":"As the mean squared distance is the sum of the squared distances divided by the number of trials, it shouldn't always be an integer. If this fails, check the calculation of the mean after the loop in the main method of RandomWalkers for a casting/integer calculation issue."
            },
            {
              "test_number": "5",
              "description":"Check that program produces different result each time.",
              "hint":"The walks are random so the outputs should not be the same each time. If this fails, check that the student has not hard-coded some values in the trial loop of their main method in RandomWalkers."
            },
            {
              "test_number": "6",
              "description":"Check randomness of mean squared distances when trials = 1.",
              "hint":"Similar to the above tests, checks that the walks are uniformly random as expected when the number of trials is one. (More like checking the randomness of awalk itself, similar to test 8 in RandomWalker.) If this fails, check previous tests.\nIf all other tests pass but this fails, it is possible there is an off-by-one error in the trials loop of the main method of RandomWalkers. If the student runs two trials when trials = 1 accidentally, the randomness of the outputs will be greatly reduced as each output is an average of two walks, not a single random walk as expected."
            }
          ]
        },
        {
          "part_name": "RollDice",
          "tests": [
            {
              "test_number": "0",
              "description":"Check formatting for input from assignment specification.",
              "hint":"Tests that the program correctly prints a histogram (should be numbers from 10 to 60 at the beginning of the line with a colon afterwards, and then a histogram made of asterisks -- this test only tests formatting, see Test 1 for a check of the range failing). If this fails, check the correctness (formatting, bounds) of the second set of loops in the main method of RollDice (after the testing has been done) that is used for printing the histogram."
            },
            {
              "test_number": "1",
              "description":"Check range of indices in histogram.",
              "hint":"Checks to see if the histogram contains entries for 10-60, the possible sums of 10 rolls of a die. If this fails, check the logic of second set of loops (after testing is done) in the main method of RollDice used for printing the histogram."
            },
            {
              "test_number": "2a",
              "description":"Check number of asterisks printed.",
              "hint":"Checks that in total the number of asterisks in the histogram equals the number of tests run (each asterisk represents the results of one test). If this fails, first check the bounds of the testing loop (first outer loop in the main method of RollDice) to ensure that all tests are being run,, as well as how the results are being stored (if some data is lost here it will not be printed). Then, check the inner loop of the second set of loops to see that all the asterisks of a certain result are printed."
            },
            {
              "test_number": "2b",
              "description":"Check number of asterisks printed when Math.random() always returns the same value.",
              "hint":"Piles all results in one bucket of the histogram and checks correctness. Possible ways the student may fail this test is incorrect logic about storing results in an array indexed by the result in the main method of RollDice. If this is true, they likely also failed the following tests about random distribution in many runs.\nAn example - a student stored results in arrsum (so was using indices 10,60, but then incorrectly set the bounds of the printing loop as int i = 9 to i < 60, likely mimicking how we often use for loops starting from i = 0 for iterating through arrays. When they tried to print asterisks for sum, the printed asterisks less than arrsum-1 which was zero, so they did not print any. They also failed most of the following tests about distribution."
            },
            {
              "test_number": "3",
              "description":"Check mean for sum of ten dice.",
              "hint":"Checks that the tests are consistent with what we expect from random dice rolls. If this fails, see Test 2b for a possible error. Otherwise, check the calculation surrounding Math.random() in main of RollDice, as well as whether all results are being properly stored and outputted."
            },
            {
              "test_number": "4",
              "description":"Check that program produces different histogram each time.",
              "hint":"Checks that the histogram is not deterministic. As random numbers are generated, the results should not be the same each time. Unlikely to fail, but if it does the student may have hard-coded results instead of running tests with random numbers."
            },
            {
              "test_number": "5",
              "description":"Corner cases.",
              "hint":"Checks cases where tests are 0 and 1. If this fails, check the logic of the first outer loop in the main of RollDice for incorrect bounds checking/handling of tests < 2."
            },
            {
              "test_number": "6",
              "description":"Check randomness for sum of ten dice.",
              "hint":"If this fails, there is likely some other issue causing improper outputs. Check the previous tests for more possibilities. (Possibly see test 2b)"
            },
            {
              "test_number": "7",
              "description":"Check randomness for sum of ten dice.",
              "hint":"If this fails, there is likely some other issue causing improper outputs. Check the previous tests for more possibilities. (Possibly see test 2b)"
            }
          ]
        }
      ]
    },
    {
      "name":"N-Body Simulation",
      "LINK": "assignments/nbody/",
      "tests": [
        {
          "test_number":"1",
          "description":"Check that it reads data from standard input.",
          "hint":"Checks that the program reads data (necessary to take in data that will be processed). If this fails, the student is likely failing due to some other error (out of bounds or too many operations etc.). Check error messages being generated and future tests to find problem."
        },
        {
          "test_number": "2",
          "description":"Check number of calls to stdin.readint(), stdin.readdouble(), stdin.readstring().",
          "hint":"Checks that the student is reading data in properly by type and amount (closely related to test 1). If this fails, most likely some other error (out of bounds etc.) is causing it to fail. Check other tests and error messages for hints."
        },
        {
          "test_number": "3",
          "description":"Check formatting of standard output.",
          "hint":"Checks the formatting of the output according to assignment specifications. If this fails, it may be due to some other error (see error messages), otherwise check the for loop and print statements at the bottom of the main method for improper formatting. If there are too many lines of code in the student solution, they may have placed their printing loop inside the main loop (printing each iteration of the loop)."
        },
        {
          "test_number": "4",
          "description":"Check formatting of output (double vs. float).",
          "hint":"Checks that the students are using doubles not floats and formatting the output data correctly. If this fails, check print statements at the bottom of the main loop, and ensure that the student is using double for their values."
        },
        {
          "test_number": "5",
          "description":"Check standard output for planets.txt when t = 0 (no motion).",
          "hint":"Checks the edge case where no planets move. If this fails, check the bounds of the main loop. (If the student used a counter initially t = 0 but set their bounds as t <= tau, this will fail.)"
        },
        {
          "test_number": "6",
          "description":"Check standard output for various files when t = 0 (no motion).",
          "hint":"Similar to Test 5, fails if the student handles the edge case improperly. Check the bounds of the main loop. Alternatively, the student could fail for formatting reasons, so check tests 3 and 4, and the print statements at the end of the main method."
        },
        {
          "test_number": "7",
          "description":"Check that standard output does not change if bodies in input file are randomly permuted.",
          "hint":"If this fails, likely there is some calculation error (see tests 18-20), or a formatting error. See previous and later tests for more specific hints."
        },
        {
          "test_number": "8",
          "description":"Check standard output for file containing only 1 body (no gravity).",
          "hint":"Checks that simple motion is being calculated properly. If this fails, check first for formatting errors or printing before the main loop instead of after it. Then, check for calculation errors involving updating position (bottom of the main loop before drawing planets)."
        },
        {
          "test_number": "9",
          "description":"Check standard output for file containing bodies with nearly zero mass (no gravity).",
          "hint":"Checks calculations of positions for multiple bodies. If this fails, check formatting errors and other error messages, then check the main loop calculation portion. The student may have calculated changes in position while calculating forces. (There should be two separate loops.)"
        },
        {
          "test_number": "10",
          "description":"Check standard output for fractional t and dt (no gravity).",
          "hint":"Checks that the student used double for t and dt. If the student fails this test, check that they did not define int t = 0 for the counter/in the for loop setup. Other errors that arose previously can also cause this to fail."
        },
        {
          "test_number": "11",
          "description":"Check number of calls to stddraw.setxscale() and stddraw.setyscale().",
          "hint":"The student should only call each of these methods once. If they are failing this test, check that they did not place them inside the for loop or where the planets are drawn."
        },
        {
          "test_number": "12",
          "description":"Check arguments to stddraw.setxscale() and stddraw.setyscale()",
          "hint":"Checks that the student properly scales the axes. Previous errors can cause this to fail. Otherwise, if this fails check the method calls located before the main for loop."
        },
        {
          "test_number": "13",
          "description":"Check number of calls to stdaudio.play().",
          "hint":"Checks that the student only plays the music file once. If this fails, check that they did not place the method call inside the main for loop but above it."
        },
        {
          "test_number": "14",
          "description":"Check argument to stdaudio.play().",
          "hint":"Checks that the student plays the proper audio. If this fails, likely some other error (out of bounds or otherwise) is causing it. Otherwise, check the argument of the method call before the main for loop in the main method."
        },
        {
          "test_number": "15",
          "description":"Check number of calls to stddraw.picture().",
          "hint":"Checks that the student draws the proper amount of times. Previous errors can cause this to fail. Other possible errors include not re-drawing the background each time (see the beginning of the main for loop), or drawing planets incorrectly (see the end of the main for loop)."
        },
        {
          "test_number": "16",
          "description":"Check number of calls to stddraw.show() and stddraw.pause().",
          "hint":"Checks that the student is calling show() and pause() properly. If this tests fails (not due to some previously persistent error), they likely placed these methods inside the planet-drawing inner loop. See the bottom of the main for loop."
        },
        {
          "test_number": "17",
          "description":"Check number of calls to stddraw.enabledoublebuffering().",
          "hint":"Checks that the student is enabling double buffering just once at the beginning of the program. If this fails not due to some other error (out of bounds or otherwise), check to see that they have not placed the method call within the main loop."
        },
        {
          "test_number": "18",
          "description":"Check standard output for planets.txt, dt = 25000, and different values of t.",
          "hint":"Checks the correctness of movement and gravity calculations. Common calculation errors include updating position while updating forces, not summing all forces, or using trigonometry incorrectly instead of using the x and y components of forces (sufficient to tell the student what they should have done instead of exactly what they likely did wrong here). Check the main loop."
        },
        {
          "test_number": "19",
          "description":"Check standard output for planets.txt, dt = 1, and different values of t.",
          "hint":"Checks the correctness of movement and gravity calculations. Common calculation errors include updating position while updating forces, not summing all forces, or using trigonometry incorrectly instead of using the x and y components of forces (sufficient to tell the student what they should have done instead of exactly what they likely did wrong here). Check the main loop."
        },
        {
          "test_number": "20",
          "description":"Check standard output for planets.txt, t = 25000, and different values of dt.",
          "hint":"Checks the correctness of movement and gravity calculations. Common calculation errors include updating position while updating forces, not summing all forces, or using trigonometry incorrectly instead of using the x and y components of forces (sufficient to tell the student what they should have done instead of exactly what they likely did wrong here). Check the main loop."
        },
        {
          "test_number": "21",
          "description":"Check standard output for files containing more than 5 bodies.",
          "hint":"Checks the correctness of movement and gravity calculations. Common calculation errors include updating position while updating forces, not summing all forces, or using trigonometry incorrectly instead of using the x and y components of forces (sufficient to tell the student what they should have done instead of exactly what they likely did wrong here). Check the main loop."
        },
        {
          "test_number": "22",
          "description":"Check standard output for varying t.",
          "hint":"Checks the correctness of movement and gravity calculations. Common calculation errors include updating position while updating forces, not summing all forces, or using trigonometry incorrectly instead of using the x and y components of forces (sufficient to tell the student what they should have done instead of exactly what they likely did wrong here). Check the main loop."
        },
        {
          "test_number": "23",
          "description":"Check standard draw for planets.txt.",
          "hint":"Checks that the planets are drawn in the proper place and the proper number of times. If this fails, check that the student has not drawn the planets before updating their positions (before the main loop)."
        }
      ]
    },
    {
      "name":"Conjunction Function",
      "LINK":"assignments/functions/"

    },
    {
      "name": "Recursive Graphics",
      "LINK": "assignments/sierpinski/",
      "parts": [
        {
          "part_name":"Transform2D",
          "tests": [
            {
              "test_number": "0a",
              "description":"Call copy() - return new array object.",
              "hint":"Ensure that the student does not just return the same array as given, but defensively copies the values into a separate array and returns that. Check the copy() method in Transform2D."
            },
            {
              "test_number": "0b",
              "description":"Call copy() - return copy of array with identical values.",
              "hint":"Checks that the values returned by copy() are merely copied from the argument array without being altered. If this fails check the copy() method in Transform2D."
            },
            {
              "test_number": "0c",
              "description":"Call copy() - doesn't mutate argument array.",
              "hint":"copy() should copy the argument array without altering the client's array values. If this fails, check that the student is not altering the given array when copying from it in copy()."
            },
            {
              "test_number": "1a",
              "description":"Call scale() with fixed polygons.",
              "hint":"Checks the correctness of scale() in Transform2D. If this fails, check that the student is properly scaling each coordinate and saving the scaled coordinates in the argument array (NOT creating a new array)."
            },
            {
              "test_number": "1b",
              "description":"Call scale() with random polygons.",
              "hint":"Checks the correctness of scale() in Transform2D. If this fails, check that the student is properly scaling each coordinate and saving the scaled coordinates in the argument array (NOT creating a new array)."
            },
            {
              "test_number": "1c",
              "description":"Call scale(x, y, alpha); scale(x, y, 1/alpha).",
              "hint":"Checks the correctness of scale(). (The final shape should be the original shape - scale then inverse)."
            },
            {
              "test_number": "2a",
              "description":"Call translate() with fixed polygons.",
              "hint":"Check the correctness of translate(). If this fails, check that the student is properly transforming each coordinate and saving the transformed coordinates in the argument array (NOT creating a new array)."
            },
            {
              "test_number": "2b",
              "description":"Call translate() with random polygons.",
              "hint":"Check the correctness of translate(). If this fails, check that the student is properly transforming each coordinate and saving the transformed coordinates in the argument array (NOT creating a new array)."
            },
            {
              "test_number": "2c",
              "description":"Call translate(x, y, +dx, +dy); translate (x, y, -dx, dy).",
              "hint":"Checks the correctness of translate()."
            },
            {
              "test_number": "3a",
              "description":"Call rotate() with fixed polygons.",
              "hint":"Checks the correctness of the rotate() method. If this fails, check the student's rotation formulas in their rotate() method."
            },
            {
              "test_number": "3b",
              "description":"Call rotate() with random polygons.",
              "hint":"Checks the correctness of the rotate() method. If this fails, check the student's rotation formulas in their rotate() method."
            },
            {
              "test_number": "3c",
              "description":"Call rotate(x, y, theta); rotate (x, y, -theta).",
              "hint":"Checks the correctness/consistency of the rotate() method (should be invertible -- final output should be the initial input). If this fails, check the student's rotation formulas in their rotate() method."
            }
          ]
        },
        {
          "part_name": "Sierpinski",
          "tests": [
            {
              "test_number": "0a",
              "description":"Check for use of standard input or output.",
              "hint":"Checks that the student is reading and writing as per assignment specifications. If this fails the student likely has some other error caused by failed recursion or something that can be seen by the error printed. See the following tests for hints/check logic of Sierpinski."
            },
            {
              "test_number": "0b",
              "description":"Check formatting of standard drawing as per assignment specification.",
              "hint":"If this fails the student likely has some other error caused by failed recursion or something that can be seen by the error printed. See the following tests for hints/check logic of Sierpinski."
            },
            {
              "test_number": "1a",
              "description":"Check height() of equilateral triangles of standard lengths.",
              "hint":"Checking correctness of height() method. If this fails, check the error message in the TESTS file. (The student may have tried to alter the API, causing this test to fail.)"
            },
            {
              "test_number": "1b",
              "description":"Check height() of equilateral triangles of arbitrary lengths.",
              "hint":"Checks the correctness of height(). If this fails, check the previous test, or the formula the student is using for the height/some other calculation error."
            },
            {
              "test_number": "2a",
              "description":"Check filledtriangle() for standard locations and lengths.",
              "hint":"Checks correctness of filledtriangle(). If this fails, check that the student calculated the vertices correctly. (Should have vertices x - length/2, x, x + length/2, y, and two y + height.)"
            },
            {
              "test_number": "2b",
              "description":"Check filledtriangle() for arbitrary locations and lengths.",
              "hint":"Checks correctness of filledtriangle(). If this fails, check that the student calculated the vertices correctly. (Should have vertices x - length/2, x, x + length/2, y, and two y + height.)"
            },
            {
              "test_number": "3a",
              "description":"Check sierpinski() for standard locations and lengths.",
              "hint":"Checking correctness of sierpinski(). If this fails it is likely caused by a failure in one of their previous methods, so check the previous tests. Otherwise, check the logic of their sierpinski() method."
            },
            {
              "test_number": "3b",
              "description":"Check sierpinski() for arbitrary locations and lengths.",
              "hint":"Checking correctness of sierpinski(). If this fails it is likely caused by a failure in one of their previous methods, so check the previous tests. Otherwise, check the logic of their sierpinski() method."
            },
            {
              "test_number": "4a",
              "description":"Check filled triangles in main().",
              "hint":"Checking correctness of main() and the drawn output. If this fails it is likely caused by a failure in one of their previous methods, so check the previous tests. Otherwise, check that the student called StdDraw.show() somewhere, otherwise nothing will have been shown in the output."
            },
            {
              "test_number": "4b",
              "description":"Check outline triangle in main().",
              "hint":"Checking correctness of main() and the drawn output. If this fails it is likely caused by a failure in one of their previous methods, so check the previous tests. Otherwise, check that the student called StdDraw.show() somewhere, otherwise nothing will have been shown in the output."
            }
          ]
        },
        {
          "part_name": "Art",
          "tests": [
            {
              "test_number": "1",
              "description":"Check for use of standard input or output.",
              "hint":"Checks that the student is reading from standard input and drawing as per assignment specifications. This will more likely fail from some other problem causing an error. Check the lines specified by the error messages to see where the student may be failing Art.java. (out of bounds exceptions, files not found, etc.)"
            },
            {
              "test_number": "2",
              "description":"Check formatting of standard drawing.",
              "hint":"Checks that the drawing is being done correctly. This can fail due to other errors (as with Test 1, check the lines specified by the errors in Art.java), or the student drawing outside of the standard draw box. Check that the student scaled the drawing window before drawing in the main method of Art.java."
            }
          ]
        },
        {
          "part_name": "Drawing Sierpinski",
          "tests": [
            {
              "test_number": "1",
              "description":"Save to file.",
              "hint":"Checks that the student saves output to a file as per assignment specifications."
            }
          ]
        },
        {
          "part_name": "Drawing Art",
          "tests": [
            {
              "test_number":"1",
              "description":"Save to file.",
              "hint":"Checks that the student is saving to a file as per assignment specifications."
            }
          ]
        }
      ]
    },
    {
      "name":"Hamming Codes in TOY",
      "LINK": "assignments/hamming/",
      "parts": [
        {
          "part_name": "encode",
          "tests": [
            {
              "test_number": "0a",
              "description":"Count number of lines of code in encode.toy.",
              "hint":""
            },
            {
              "test_number": "0b",
              "description":"Check formatting for assignment specification input file.",
              "hint":"Checks the correctness pertaining to number of lines and reading from standard input. (Mistakes include reading when standard input is empty or not attempting a solution. For the former see the following tests.)"
            },
            {
              "test_number": "0c",
              "description":"Check correctness for assignment specification input file.",
              "hint":"Similar to the previous test, checks correctness pertaining to formatting. Errors may include no solution or an incorrect solution (reading from standard input when empty etc.). Check errors and following tests."
            },
            {
              "test_number": "1",
              "description":"Check that encode.toy consumes all data on standard input.",
              "hint":"Likely errors include reading from standard input when input is empty. Check the read-in section at the top of the main loop."
            },
            {
              "test_number": "2",
              "description":"Check correctness for checklist input files.",
              "hint":"Checks correctness. See previous/future tests for more specifics. Most likely the problem is with the reading/writing of standard input (see 0b/0c)."
            },
            {
              "test_number": "3",
              "description":"Check correctness for input files comprising 4 message bits.",
              "hint":"Checking correctness on a small subset of inputs. If this fails, the student is likely calculating their output incorrectly. Check the calculation/output in the main loop."
            },
            {
              "test_number":"4",
              "description":"Check correctness for input file containing only ffff.",
              "hint":"Checks that the student correctly checks for end-of-file."
            },
            {
              "test_number": "5",
              "description": "Check correctness for random inputs.",
              "hint":"If the student is failing this, check previous tests for more specific hints."
            }
          ]
        },
        {
          "part_name": "decode",
          "tests": [
            {
              "test_number": "0a",
              "description":"Count number of lines of code in decode.toy.",
              "hint":""
            },
            {
              "test_number": "0b",
              "description":"Check formatting for assignment specification input file.",
              "hint":"If this fails, the student is likely having correctness issues. Common issues include reading too much or too little from standard input. Check the top of the main loop in decode.toy."
            },
            {
              "test_number": "1",
              "description":"Check that decode.toy consumes all data on standard input.",
              "hint":"Check that the student is reading in input and correctly checking for the end of standard input at the top of the main loop."
            },
            {
              "test_number": "2",
              "description":"Check correctness for checklist input files.",
              "hint":"Checks that the student's decoding is correct. The most common error is failing to read/write properly (see test 0b and 1)."
            },
            {
              "test_number": "3a",
              "description":"Check correctness for some input files comprising a single group of 7 bits.",
              "hint":"Checks for a small subset of simple inputs (some submissions with reading problems may pass this test). If incorrect but reading correctly, check the calculation of correct parity in the main loop."
            },
            {
              "test_number": "3b",
              "description":"Check correctness for all inputs comprising a single group of 7 bits.",
              "hint":"Checks for more of the subset of simple inputs of one message (some submissions with reading problems may pass this test). If incorrect but reading correctly, check the calculation of correct parity in the main loop."
            },
            {
              "test_number": "4",
              "description":"Check correctness for input files that flip a specific message or parity bit.",
              "hint":"Checks correctness for a small subset of inputs. Likely errors are related to test 0b/1 (reading/writing input/output)."
            },
            {"test_number": "5",
              "description":"Check correctness for input file containing only ffff.",
              "hint":""
            },
            {
              "test_number": "6",
              "description":"Check correctness for random inputs.",
              "hint":"Most errors are related to reading/writing (see test 1/0b)."
            }
          ]
        }
      ]
    },
    {
      "name": "Machine Learning Classifier",
      "LINK": "assignments/classifier/"

    },
    {
      "name": "Guitar Hero",
      "LINK": "assignments/guitar/",
      "parts": [
        {
          "part_name": "RingBuffer",
          "tests": [
            {
              "test_number": "1a",
              "description":"Random calls to enqueue() and peek().",
              "hint":"Test for correctness. If there is an issue, check what the last method called was before failing. This is likely an issue with enqueue. Check that the student is assigning the element at the end and incrementing the last index correctly in enqueue()."
            },
            {
              "test_number": "1b",
              "description":"Random calls to enqueue() and peek().",
              "hint":"Test for correctness. If there is an issue, check what the last method called was before failing. This is likely an issue with enqueue. Check that the student is assigning the element at the end and incrementing the last index correctly in enqueue()."
            },
            {
              "test_number": "2a",
              "description":"Random calls to enqueue(), isfull(), size(), and capacity().",
              "hint":"Testing the correctness of isfull(), size(), and capacity(). If this fails, check which method is causing the test to fail. Check that the student is initializing the capacity correctly, and updating the size correctly during enqueue()."
            },
            {
              "test_number": "2b",
              "description":"Random calls to enqueue(), isfull(), size(), and capacity().",
              "hint":"Testing the correctness of isfull(), size(), and capacity(). If this fails, check which method is causing the test to fail. Check that the student is initializing the capacity correctly, and updating the size correctly during enqueue()."
            },
            {
              "test_number": "3a",
              "description":"Random calls to enqueue(), dequeue(), and peek().",
              "hint":"Checks correctness of enqueue(), dequeue(). If test 1 also fails, this is likely a problem with enqueue()."
            },
            {
              "test_number": "3b",
              "description":"Random calls to enqueue(), dequeue(), and peek().",
              "hint":"Checks correctness of enqueue(), dequeue(). If test 1 also fails, this is likely a problem with enqueue()."
            },
            {
              "test_number": "4a",
              "description":"Random calls to all methods.",
              "hint":"General correctness test. See previous tests for more specifics."
            },
            {
              "test_number": "4b",
              "description":"Random calls to all methods.",
              "hint":"General correctness test. See previous tests for more specifics."
            },
            {
              "test_number": "5",
              "description":"Random calls to all methods, with small ring buffer capacities.",
              "hint":"General correctness test. See previous tests for more specifics."
            },
            {
              "test_number": "6",
              "description":"Calls to isfull(), isempty(), size(), and capacity() before enqueueing any items.",
              "hint":"Checks the correctness of the above methods while the RingBuffer is still empty. If this is wrong, check that the student initializes values correctly in the constructor and handles this edge case correctly."
            },
            {
              "test_number": "7",
              "description":"Exceptional calls to enqueue(), dequeue(), and peek().",
              "hint":"Checks that the student handles exceptions correctly. If this fails check that each of the methods tries to check for edge cases. Check that the student is handling isFull() and isEmpty() correctly."
            },
            {
              "test_number": "8",
              "description":"Create a ring buffer of capacity n; enqueue() n items, with each item having value 0 with probability p; dequeue() n items.",
              "hint":"General correctness testing. See previous tests for more specifics."
            },
            {
              "test_number": "9",
              "description":"Create multiple ring buffer objects at the same time.",
              "hint":"Checks that multiple objects can be created (the RingBuffer array and other instance variables are not static), but also a more general correctness test."
            }
          ]
        },
        {
          "part_name": "RingBuffer Memory",
          "tests": [
            {
              "test_number": "1a-1k", 
              "description":"Total memory usage for RingBuffer of capacity n.",
              "hint":"Checks that the student uses a linear amount of memory for this object (unlikely to fail)."
            }
          ]
        },
        {
          "part_name": "RingBuffer Timing",
          "tests": [
            {
              "test_number": "1a-1k",
              "description":"Create RingBuffer of capacity n; enqueue() n items; interleave n calls each to dequeue(), peek(), and enqueue().",
              "hint":"Checks that all methods take constant time. If this fails it likely fails due to some other issue."
            },
            { 
              "test_number": "2a-2k",
              "description":"Create RingBuffer of capacity n; enqueue n/2 items; then make n random calls to size(), isEmpty(), isFull(), enqueue(), dequeue(), and peek().",
              "hint":"General correctness test of all methods."
            }
          ]
        },
        {
          "part_name": "GuitarString",
          "tests": [
            {
              "test_number": "1a",
              "description":"Construct guitarstring of specified frequency and check length().",
              "hint":"Checks the correctness of length(). Check that the student is calculating the length correctly in the constructor of GuitarString, and if they save it in an instance variable, that they are saving to the instance variable and not to a local variable of the same name."
            },
            {
              "test_number": "1b",
              "description":"Construct guitarstring of specified frequency and check length().",
              "hint":"Checks the correctness of length(). Check the calculation and storing of the length in the constructor/instance variables of GuitarString."
            },
            {
              "test_number": "2",
              "description":"Construct guitarstring using init[] array and check length().",
              "hint":"Checks the correctness of the array constructor in GuitarString. Similar to 1a, if the student is saving to an instance variable check that they aren't accidentally using a local variable instead."
            },
            {
              "test_number": "3a",
              "description":"Construct guitarstring of specified frequency and check that associated RingBuffer object has the desired capacity, size, and initial values.",
              "hint":"Checks that the student is using RingBuffer correctly in their GuitarString objects. If this fails, check that the student is initializing the RingBuffer in the constructor with the correct length, as opposed to elsewhere where n is a different value (i.e. where instance variables are declared)."
            },
            {
              "test_number": "3b",
              "description":"Construct guitarstring of specified frequency and check that associated RingBuffer object has the desired capacity, size, and initial values.",
              "hint":"See test 3a."
            },
            {
              "test_number": "4",
              "description":"Construct guitarstring using init[] array; check that associated RingBuffer object has the desired capacity, size, and initial values.",
              "hint":"See test 3a - check that the student is using the right initialization length for the RingBuffer."
            },
            {
              "test_number": "5",
              "description":"Construct guitarstring of specified frequency; call pluck(); and check that associated RingBuffer object has uniformly random values between -0.5 and 0.5.",
              "hint":"Checks that the student is correctly filling the ringbuffer with new values during a pluck(). See errors in the TESTS file for runtime errors the student may be having to cause this to fail."
            },
            {
              "test_number": "6",
              "description":"Construct guitarstring using init[] array; call pluck(); and check that associated RingBuffer object has uniformly random values between -0.5 and 0.5.",
              "hint":"Checks the correctness of pluck() and the array constructor. See previous tests for hints on which is failing. Otherwise, ensure that the student is using StdRandom.uniform(-0.5, 0.5), not something similar but not quite the same/correct."
            },
            {
              "test_number": "7",
              "description":"Construct guitarstring using init[] array; perform alternating sequence of calls to sample() and tic().",
              "hint":"Checks the correctness of sample() and tic(). If this is failing and one of the previous tests is also failing, this is likely due to an error with the constructed RingBuffer object."
            },
            {
              "test_number": "8",
              "description":"Random intermixed calls to sample() and tic().",
              "hint":"Check of correctness of sample() and tic(). If this fails, check to see if it may be caused by an issue with the constructor (see previous tests)."
            },
            {
              "test_number": "9",
              "description":"Random intermixed calls to sample(), tic(), and pluck().",
              "hint":"Check previous tests, and see runtime errors printed to see why the student may have failed. One possibility is trying to access an instance variable of RingBuffer directly instead of through the interface."
            },
            {
              "test_number": "10",
              "description":"Construct two guitarstring objects using init1[] and init2[] arrays; perform alternating sequence of calls to sample() and tic().",
              "hint":"Checks the correctness of sample() and tic()."
            }
          ]
        },
        {
          "part_name": "GuitarString Timing",
          "tests": [
            {
              "test_number": "1",
              "description":"Construct guitarstring using init[] array; repeatedly call tic() and sample() and check the number of calls to methods in RingBuffer.",
              "hint":"If this fails, the student may have misunderstood how to use a RingBuffer, and enqueued and dequeued all numbers to shift over."
            },
            {
              "test_number": "2",
              "description":"Construct guitarstring using init[] array; call pluck() and check the number of calls to methods in RingBuffer.",
              "hint":"Checks that pluck() is working correctly in the correct number of method calls. See correctness tests and errors for possible problems causing this test to fail."
            },
            {
              "test_number": "2a-2k",
              "description":"Create a guitarstring of length n; call pluck(); then, interleave n calls each sample() and tic().",
              "hint":""
            }
          ]
        },
        {
          "part_name": "GuitarHero",
          "tests": [
            {
              "test_number": "1a",
              "description":"Check that pluck() is called exactly once for each keystroke.",
              "hint":"Checks the correctness of student interpretation of keystrokes. The most common error is using StdDraw.hasNextKeyTyped() instead of Keyboard.hasNextKeyTyped()."
            },
            {
              "test_number": "1b",
              "description":"Check that pluck() is called exactly once for each keystroke.",
              "hint":"Similar to the previous test, but including keystrokes not in the keyboard. Probably similar issue to the previous test, but may include not handling non-keyboard keystrokes properly."
            },
            {
              "test_number": "2a",
              "description":"Check that GuitarString objects are constructed with correct frequencies for integral frequencies.",
              "hint":"Checks that the student sets up the keyboard and sets up strings with the correct frequencies. The same problem from test 1 may cause this to fail. Otherwise set up the initialization at the beginning of the main method."
            },
            {
              "test_number": "2b",
              "description":"Check that GuitarString objects are constructed with correct frequencies for arbitrary frequencies.",
              "hint":"Checks that the student sets up the keyboard and sets up strings with the correct frequencies. The same problem from test 1 may cause this to fail. Otherwise set up the initialization at the beginning of the main method."
            },
            {
              "test_number": "3",
              "description":"Check that tic() is called once per call to StdAudio.play().",
              "hint":"Check that the string tics each time a note is played (the sound is evolving). Check the main loop of the main method."
            },
            {
              "test_number": "4a",
              "description":"Check correctness of output on StdAudio for short time intervals with no feedback.",
              "hint":"Check for the correctness of the GuitarStrings without feedback. Problems not associated with tic()."
            },
            {
              "test_number": "4b",
              "description":"Check correctness of output on StdAudio for single keystrokes.",
              "hint":"Check for correctness of a single keystroke. Check how the student plucks a note, and updates at each time set."
            },
            {
              "test_number": "4c",
              "description":"Check correctness of output on StdAudio for strings with integral frequencies.",
              "hint":"General check of correctness on plucking and updating."
            },
            {
              "test_number": "4d",
              "description":"Check correctness of output on StdAudio for arbitrary frequencies.",
              "hint":"General check of correctness on plucking and updating."
            },
            {
              "test_number": "4e",
              "description":"Check correctness of output on StdAudio for arbitrary keystrokes, some non-keyboard keystrokes.",
              "hint":"General check of correctness on plucking and updating, with check for non-keyboard keystrokes."
            },
            {
              "test_number": "4f",
              "description":"Check correctness of output on StdAudio for random sequence of integral frequencies.",
              "hint":"General check of correctness on plucking and updating."
            },
            {
              "test_number": "4g",
              "description":"Check correctness of output on StdAuido for random sequence of arbitrary frequencies.",
              "hint":"General check of correctness on plucking and updating."
            }
          ]
        }
      ]
    },
    {
      "name":"Markov Model", 
      "LINK": "assignments/markov/",
      "parts": [
        {
          "part_name": "MarkovModel",
          "tests": [
            {
              "test_number": "1",
              "description":"Check order() method.",
              "hint":"Checks that the order() method returns properly. Issues seem uncommon but are likely due to a solution missing, or possibly instance variables not being initialized. Otherwise, there may be a runtime error in the constructor (out of bounds error etc.)"
            },
            {
              "test_number": "2a",
              "description":"Check 1-argument freq() method.",
              "hint":"Checks that the student can correctly return the frequency of a kgram."
            },
            {
              "test_number": "2b",
              "description":"Check 1-argument freq() method.",
              "hint":"Checks that the student can correctly return the frequency of a kgram (for larger inputs - may fail due to some other error in constructor if 2a passes)."
            },
            {
              "test_number": "2c",
              "description":"Check 1-argument freq() method for kgrams that do not appear in the text.",
              "hint":"Should be able to recognize a kgram that has not been seen. Should return 0 if it has not been seen, NOT throw an exception."
            },
            {
              "test_number": "2d",
              "description":"Check 1-argument freq() method over random strings and various alphabets.",
              "hint":"General correctness test."
            },
            {
              "test_number": "3a",
              "description":"Check 2-argument freq() method for all kgrams that appear in the text.",
              "hint":"Checks that the student correctly calculated and stored the frequencies for kgrams of small k."
            },
            {
              "test_number": "3b",
              "description":"Check 2-argument freq() method for kgrams in the text.",
              "hint":"Checks that the student correctly calculated and stored the frequencies for kgrams of different k (if 3a does not fail and this does it suggests some problem with dividing the kgrams in the constructor)."
            },
            {
              "test_number": "3c",
              "description":"Check 2-argument freq() method for kgrams not found in the text.",
              "hint":"Passing this test and failing the previous two suggest the student either is failing to read in any frequencies (check the logic of the constructor), or more likely they are not using their STs properly. Check the logic of the two argument freq() method (this should merely recall and return some values from an ST). Should return 0 if it has not been seen, NOT throw an exception."
            },
            {
              "test_number": "4a",
              "description":"Check that 1- and 2-argument freq() methods are consistent.",
              "hint":"Checks that the two freq() methods are consistent, which suggest the students are using the STs properly. If this fails, one of the methods might be failing due to some other error (ie not checking if a character exists in a kgram's associated ST causing a NULL pointer error)."
            },
            {
              "test_number": "4b",
              "description":"Check that 1- and 2-argument freq() methods are consistent",
              "hint":"Checks that the two freq() methods are consistent, which suggest the students are using the STs properly. If this fails, one of the methods might be failing due to some other error (ie not checking if a character exists in a kgram's associated ST causing a NULL pointer error)."
            },
            {
              "test_number": "5a",
              "description":"Check tostring() method.",
              "hint":"Checks the toString() method, which both checks format and that the student calculated the frequencies properly. If they fail this test and some tests in 2/3, see their constructor with errors in frequency storage and calculation. Otherwise, check the formatting of the output in the toString() method."
            },
            {
              "test_number": "5b",
              "description":"Check toString() method.",
              "hint":"Checks the toString() method, which both checks format and that the student calculated the frequencies properly. If they fail this test and some tests in 2/3, see their constructor with errors in frequency storage and calculation. Otherwise, check the formatting of the output in the toString() method."
            },
            {
              "test_number": "5c",
              "description":"Check tostring() method for k = 0.",
              "hint":"Checks the toString() method, which both checks format and that the student calculated the frequencies properly for the edge case k = 0. If they fail this test and some tests in 2/3, see their constructor with errors in frequency storage and calculation. Otherwise, check the formatting of the output in the toString() method."
            },
            {
              "test_number": "6a",
              "description":"Check that toString() method is consistent with 2-argument freq() method.",
              "hint":"Further checks that the student computed frequencies and formatted the output string properly."
            },
            {
              "test_number": "6b",
              "description":"Check that toString() method is consistent with 2-argument freq() method.",
              "hint":"Further checks that the student computed frequencies and formatted the output string properly."
            },
            {
              "test_number": "7a",
              "description":"Check random() method for order 2 model.",
              "hint":"Checks the randomness of an order 2 Markov Model. If this fails see the random() method to determine how the student is generating a random character (especially if the TESTS file shows no randomness)."
            },
            {
              "test_number": "7b",
              "description":"Check random() method for order 0 model.",
              "hint":"Checks the randomness of an order k Markov Model. If this fails see the random() method to determine how the student is generating a random character (especially if the TESTS file shows no randomness)."
            },
            {
              "test_number": "7c",
              "description":"Check random() method for order k model.",
              "hint":"Checks the randomness of an order k Markov Model. If this fails see the random() method to determine how the student is generating a random character (especially if the TESTS file shows no randomness)."
            },
            {
              "test_number": "8a",
              "description":"Check that random() is consistent with freq() for order 2 model.",
              "hint":"Checks that the student is storing frequencies and calculating probabilities properly based on the frequencies. If this test fails, especially if test 2 does not fail, see the random() method for logical errors."
            },
            {
              "test_number": "8b",
              "description":"Check that random() is consistent with freq() for order 0 model.",
              "hint":"Checks that the student is storing frequencies and calculating probabilities properly based on the frequencies. If this test fails, especially if test 2 does not fail, see the random() method for logical errors."
            },
            {
              "test_number": "9",
              "description":"Check that repeated calls to order() and two freq() methods return same values.",
              "hint":"Checks that the student is not mutating instance variables when calling order() and freq(). Likely fails due to some runtime error."
            },
            {
              "test_number": "10",
              "description":"Create two MarkovModel objects at the same time.",
              "hint":"Checks that instance variables are not static."
            },
            {
              "test_number": "11",
              "description":"Call one-argument freq() method with invalid argument.",
              "hint":"Checks that the student throws exception properly (wrong length kgram)."
            },
            {
              "test_number": "12",
              "description":"Call two-argument freq() with invalid argument.",
              "hint":"Checks that the student throws exception properly (wrong length kgram)."
            },
            {
              "test_number": "13",
              "description":"Call random() with invalid argument.",
              "hint":"Checks that the student throws exception properly (wrong length kgram, no such kgram)."
            }
          ]
        },
        {
          "part_name": "MarkovModel Memory",
          "tests": [
            {
              "test_number": "1",
              "description":"Check memory for input17.txt with varying k.",
              "hint":"Checks memory usage against reference solution. If this fails one of the early tests, they may be using an array of wrapper types instead of an array of primitives, and the extra overhead causes them to fail for small k. (Integer[] instead of int[])"
            },
            {
              "test_number": "2",
              "description":"Check memory for larger texts.",
              "hint":""
            }
          ]
        },
        {
          "part_name": "MarkovModel Timing",
          "tests": [
            {
              "test_number": "1",
              "description":"Construct MarkovModel and check number of calls to methods in ST.",
              "hint":"If a method is called to many times, look at the constructor and determine if there is a way the student might have avoided calling the method twice within a loop (i.e. they are not saving the value, instead they are calling once in conditional and then again to use the value etc.) Additionally, be sure to check other methods that are called (the may have called freq() and also ST.contains(), when they should have used the value they got from freq() to determine if the kgram had been seen before."
            },
            {
              "test_number": "2",
              "description":"Construct MarkovModel; for each k-gram in text, call 1-argument freq(), check number of calls to ST methods.",
              "hint":"The student may be calling get() twice, once to check that the return value is not null (it shouldn't be if they set up their constructor properly), and once to return the value. If they need to check this, they should save the value, then check and return the saved value."
            },
            {
              "test_number": "3",
              "description":"Construct MarkovModel; for each k-gram in text, call 2-argument freq(), check number of calls to methods in ST.",
              "hint":"Similar to test 2, the student may be checking conditions they shouldn't need to if their constructor works properly, otherwise the student may not be saving some value they should save to avoid calling ST methods repeatedly."
            },
            {
              "test_number": "4",
              "description":"Construct MarkovModel; for each k-gram in text, call random(), count calls to ST methods.",
              "hint":"The student may fail this test if they use a ST to store data for characters following kgrams, and have to transfer this data to an array to generate the random character. Point out that they might consider storing the values in a char-indexed array to avoid having to transfer. (Sacrifice some memory for time)"
            },
            {
              "test_number": "5",
              "description":"Construct MarkovModel; for each k-gram in text, call toString() method and check the number of calls to methods in ST.",
              "hint":"Checks calls to ST methods. The most common error seems to be using a ST to store frequencies, and then using st.get()[i] in a conditional and then again when calling freq() to get the frequency. The student should instead save the frequency and then check if it is greater than zero and print if they choose to use this method."
            },
            {
              "test_number": "6a-6g",
              "description":"Construct MarkovModel for text of length n.",
              "hint":"If this fails, likely due to string concatenation in the constructor."
            },
            {
              "test_number": "7a-7g",
              "description":"Construct MarkovModel and call order() method n times.",
              "hint":"Checks that the order() method takes constant time."
            },
            {
              "test_number": "8a-8g",
              "description":"Construct MarkovModel and call 1-argument freq() method n times.",
              "hint":"Checks that the one-argument freq() method takes constant time (recalls a value from the ST)."
            },
            {
              "test_number": "9a-9g",
              "description":"Construct MarkovModel and call 2-argument freq() method n times.",
              "hint":"Checks that the two-argument freq() method takes constant time (recalls a value from the ST)."
            }
          ]
        },
        {
          "part_name": "TextGenerator",
          "tests" : [
            {
              "test_number": "1a",
              "description":"Check number of characters in output.",
              "hint":"Checks that the length of the students output is correct. Failing this test may suggest an issue with the bounds of the loop in the main method (it should go from i = 0 to i < T-k. If the number of extra characters is very consistent, check that the student is not printing something besides their output in the main method, possibly before the loop. Otherwise if the student is getting a out of bounds error of some sort, they are likely using the input string/text wrong. See future tests for more output correctness hints."
            },
            {
              "test_number": "1b",
              "description":"Check number of characters in output for corner cases.",
              "hint":"Check output for cases where k and T are equal. If the student fails this they are likely also failing the last test. See notes there. Otherwise, the logic of the loop is likely flawed."
            },
            {
              "test_number": "2a",
              "description":"Check first k characters of output.",
              "hint":"Checks that the student first prints the kgram of the text before printing anything else. If this fails and the student seems to be printing the same first letter always, check that they do not have a print statement of something else before printing the generated text. If the student fails test 1 but not this, it is likely an issue with how they are handling the kgram and text. Otherwise, check the bounds of the loops"
            },
            {
              "test_number": "2b",
              "description":"Check first k characters of output for corner cases.",
              "hint":"Similar to the previous test, tests that the student first prints the original kgram."
            },
            {
              "test_number": "3",
              "description":"Check output for deterministic inputs.",
              "hint":"Check the output given an input where only one output is possible (i.e. the alphabet were b is the only letter that ever comes after a...). Possible problems include an issue with the bounds of the loop in the main method (it should go from i = 0 to i < T-k. Check that the student is not printing something besides their output in the main method, possibly before the loop. If the student is getting a out of bounds error of some sort, they are likely using the input string/text wrong."
            },
            {
              "test_number": "4a",
              "description":"Check that output is nondeterministic.",
              "hint":"Checks that the student outputs are random. Running the method twice on the same inputs should produce different outputs. Likely failing for the same reason as one of the tests above."
            },
            {
              "test_number": "4b",
              "description":"Check that output is nondeterministic.",
              "hint":"Checks that the student handles the k=0 case properly. This should produce a text of proper length with all letter appearing randomly according to the number of instances. The student may fail for the same reasons as above, or because their logic with this edge case is wrong. (If they handle this case by returning immediately or something similar they will fail this test.)"
            },
            {
              "test_number": "5a",
              "description":"Check that every n-gram in output appear in input for n <= k+1.",
              "hint":"Characters are outputted by the Markov model, so every ngram in the beginning of the output must also exist somewhere in the input. Problems with this test suggest the student is using the Markov model incorrectly. They may be either not outputting anything or have an extraneous print statement."
            },
            {
              "test_number": "5b",
              "description":"Check that every n-gram in output appear in input for n <= k+1.",
              "hint":"See test 5a."
            },
            {
              "test_number": "6",
              "description":"Check that some n-grams in output do not appear in input for n = k+2.",
              "hint":"Characters are outputted by the Markov model, so some output ngrams must deviate from the input due to randomness after n = k+2. Problems with this test suggest the student is using the Markov model incorrectly. They are likely not printing anything."
            },
            {
              "test_number": "7a",
              "description":"Check distribution of characters following each k-gram.",
              "hint":"Checks that the student is using the Markov model correctly. If the student fails this test they are likely failing due to the same reasons as one of the previous tests (see test 1 for some ideas)."
            },
            {
              "test_number": "7b",
              "description":"Check distribution of characters following each k-gram.",
              "hint":"Checks that the student is using the Markov model correctly. If the student fails this test they are likely failing due to the same reasons as one of the previous tests (see test 1 for some ideas)."
            },
            {
              "test_number": "7c",
              "description":"Check distribution of characters following each k-gram.",
              "hint":"Checks distribution of characters for k = 0. If this fails but the previous two do not, the student is likely handling their kgram incorrectly."
            }
          ]
        },
        {
          "part_name": "TextGenerator Timing",
          "tests": [
            {
              "test_number": "1",
              "description":"Check number of calls to methods in MarkovModel.",
              "hint":"This seems to fail most commonly when there is no student output. Otherwise, check that the student is merely using MarkovModel.random() and not attempting to reimplement the markov model (especially for the case where k = 0)."
            },
            {
              "test_number": "2a-2k",
              "description":"Generate random text of length t using markov model of order k = 2.",
              "hint":"Submissions that fail this and not other tests are likely failing due to string concatenation issues (possibly building the entire output instead of merely printing as they go without using a StringBuilder or something similar)."
            },
            {
              "test_number": "3a-3k",
              "description":"Generate random text of length t = 100,000 using markov model of order k.",
              "hint":"See previous tests - likely fails for other reasons."
            }
          ]
        }
      ]
    },
    {
      "name": "TSP",
      "LINK": "assignments/tsp/",
      "parts": [
        {
          "part_name" :"Tour",
          "tests": [
            {
              "test_number": "0",
              "description":"Construct tour using 4-argument constructor, then call size(), length(), draw(), or toString().",
              "hint":"A general correctness test for the methods listed above. See the method that failed for a hint of where to look for problems. Likely errors with toString() include formatting errors."
            },
            {
              "test_number": "1",
              "description":"Check alternating sequence of calls to insertNearest() and size() with sample input files.",
              "hint":"Checks that the student is updating the size correctly when inserting points. If this fails, check the insertNearest() method if the student is using an instance variable, else the size() method if the student is iterating through the list to count nodes."
            },
            {
              "test_number": "2a",
              "description":"Check alternating sequence of calls to insertNearest() and length() with sample input files.",
              "hint":"Correctness test for insertNearest() and length(). Either length() is wrong (the previous test succeeded), or insertNearest() may be wrong. This will require checking the logic of the student's method. Likely errors include mishandling the linked list, causing failing due to some runtime error."
            },
            {
              "test_number": "2b",
              "description":"Check alternating sequence of calls to insertNearest() and length() for random points between 0.0 and 100.0.",
              "hint":"General correctness test for insertNearest() and length(). Either length() is wrong (the previous test succeeded), or insertNearest() may be wrong. This will require checking the logic of the student's method. Likely errors include mishandling the linked list, causing failing due to some runtime error."
            },
            {
              "test_number": "2c",
              "description":"Check alternating sequence of calls to insertNearest() and length() with sample input files in which there are ties for which point to insert next.",
              "hint":"Edge case correctness test for insertNearest() and length(). Either length() is wrong (the previous test succeeded), or insertNearest() may be wrong. If the previous two tests fail this likely fails due to the same problem. Otherwise, the student may be mishandling the comparison of distances (taking the last node of same distance, not the first etc.)."
            },
            {
              "test_number": "2d",
              "description":"Check alternating sequence of calls to insertNearest() and length() with points on a 100-by-100 lattice, likely to be ties.",
              "hint":"General edge case correctness test for insertNearest() and length(). Either length() is wrong (the previous test succeeded), or insertNearest() may be wrong. If the 2a/b fail this likely fails due to the same problem. Otherwise, the student may be mishandling the comparison of distances (taking the last node of same distance, not the first etc.)."
            },
            {
              "test_number": "2e",
              "description":"Check alternating sequence of calls to insertNearest() and length() with points in ascending/descending order.",
              "hint":"Correctness test of insertNearest() and length()."
            },
            {
              "test_number": "2f",
              "description":"Check alternating sequence of calls to insertNearest() and length() with points that have very large coordinates.",
              "hint":"Stress test of insertNearest() and length() ."
            },
            {
              "test_number": "3",
              "description":"Check alternating sequence of calls to insertNearest() and toString().",
              "hint":"Checks the correctness of the two methods listed above. If test 2 failed as well, this may be an issue with insertNearest(). Otherwise, check toString() for formatting and other errors."
            },
            {
              "test_number": "4",
              "description":"Check alternating sequence of calls to insertNearest() and draw().",
              "hint":"Checks the correctness of the two methods listed above. If tests 2 and 3 also fail, likely an issue with insertNearest(). Otherwise, check draw() for logical errors."
            },
            {
              "test_number": "5",
              "description":"Check that toString() and length() are consistent after each call to insertNearest().",
              "hint":"Checks that toString() and length() are correct relative to each other (this can pass even if insertNearest() is incorrect). If this fails, there may be some runtime error. Otherwise, check the bounds of the loops used in the two methods and the correctness of the linked list traversal in each (should look very similar). If this test fails but test 7 succeeds, the issue is likely with length()."
            },
            {
              "test_number": "6",
              "description":"Check that draw() and length() are consistent after each call to insertNearest().",
              "hint":"Checks the correctness of draw() and length() relative to each other. (same as test 5, can pass even if insertNearest() is incorrect). If this fails, check the linked list traversal in both methods and compare - they should look very similar. If this test fails but test 7 succeeds, the issue is likely with length()."
            },
            {
              "test_number": "7",
              "description":"Check that toString() and draw() are consistent after each call to insertNearest().",
              "hint":"Checks that toString() and draw() are correct relative to each other (this can pass even if insertNearest() is incorrect). If this fails, there may be some runtime error. Otherwise, check the bounds of the loops used in the two methods and the correctness of the linked list traversal in each (should look very similar). If this test fails and only one of test 5 or 6 fails, there is likely an issue with whichever method was tested next to length() in the failed test."
            },
            {
              "test_number": "8",
              "description":"Check alternating sequence of calls to insertSmallest() and size().",
              "hint":"Checks that insertSmallest() correctly updates the size of the tour (if the student is looping through the tour and did so incorrectly, they would have failed test 1 also). If the student is not looping, they may have forgotten to update the size instance variable. Otherwise, insertSmallest() is likely incorrect."
            },
            {
              "test_number": "9a",
              "description":"Check alternating sequence of calls to insertSmallest() and length() for sample input texts.",
              "hint":"Correctness test for insertSmallest() and length(). Either length() is wrong (the previous test succeeded), or insertSmallest() may be wrong. This will require checking the logic of the student's method. Likely errors include mishandling the linked list, causing failing due to some runtime error."
            },
            {
              "test_number": "9b",
              "description":"Check alternating sequence of calls to insertSmallest() and length() for random points 0.0, 100.0.",
              "hint":"General correctness/stress test for insertSmallest() and length()."
            },
            {
              "test_number": "9c",
              "description":"Check alternating sequence of calls to insertSmallest() and length() for points with large coordinates.",
              "hint":"General correctness/stress test for insertSmallest() and length()."
            },
            {
              "test_number": "10",
              "description":"Check alternating sequence of calls to insertSmallest() and toString().",
              "hint":"Checks the correctness of the two methods listed above. If test 9 failed as well, this may be an issue with insertNearest(). Otherwise, check toString() for formatting and other errors."
            },
            { 
              "test_number": "11",
              "description":"Check alternating sequence of calls to insertSmallest() and draw().",
              "hint":"Checks the correctness of the two methods listed above. If test 9 failed as well, this may be an issue with insertNearest(). Otherwise, check draw() for issues with looping through the linked list."
            },
            {
              "test_number": "12",
              "description":"Check that toString() and length() consistent after each call to insertSmallest()",
              "hint":"Checks that toString() and length() are correct relative to each other (this can pass even if insertSmallest() is incorrect). If this fails, there may be some runtime error. Otherwise, check the bounds of the loops used in the two methods and the correctness of the linked list traversal in each (should look very similar). If this test fails but test 14 succeeds, the issue is likely with length() (also tests 5 and 6 may have failed for insertNearest())."
            },
            {
              "test_number": "13",
              "description":"Check that draw() and length() are consistent after each call to insertSmallest().",
              "hint":"Checks that draw() and length() are correct relative to each other (this can pass even if insertSmallest() is incorrect). If this fails, there may be some runtime error. Otherwise, check the bounds of the loops used in the two methods and the correctness of the linked list traversal in each (should look very similar). If this test fails but test 14 succeeds, the issue is likely with length() (also tests 5 and 6 may have failed for insertNearest())."
            },
            {
              "test_number": "14",
              "description":"Check that toString() and draw() are consistent after each call to insertSmallest().",
              "hint":"Checks that toString() and draw() are correct relative to each other (this can pass even if insertSmallest() is incorrect). If this fails, there may be some runtime error. Otherwise, check the bounds of the loops used in the two methods and the correctness of the linked list traversal in each (should look very similar). If this test fails and only one of test 12 or 13 fails, there is likely an issue with whichever method was tested next to length() in the failed test."
            },
            {
              "test_number": "15",
              "description":"Check size(), length(), draw(), and toString() with a 0-point tour.",
              "hint":"Checks the edge case of zero points."
            },
            {
              "test_number": "16",
              "description":"Check size(), length(), draw(), and toString() with a 1-point tour.",
              "hint":"Checks the edge case of a one-point tour (failing this but not other tests suggest some failure to create/iterate a length-one linked list."
            },
            {
              "test_number": "17",
              "description":"Create two simultaneous tour objects; check size() and length().",
              "hint":"Checks that the student did not use static variables and can create two separate tours correctly."
            },
            {
              "test_number": "18a",
              "description":"Random calls to insertNearest(), size(), and length().",
              "hint":"Stress test for methods listed above."
            },
            {
              "test_number": "18b",
              "description":"Random calls to insertSmallest(), size(), and length().",
              "hint":"Stress test for methods listed above."
            },
            {
              "test_number": "18c",
              "description":"Random calls to all methods.",
              "hint":""
            }
          ]
        },
        {
          "part_name": "Tour Memory",
          "tests": [
            {
              "test_number": "1a-1f",
              "description":"Total memory usage for tour of length n.",
              "hint":""
            }
          ]
        },
        {
          "part_name": "Tour Timing",
          "tests": [
            {
              "test_number": "1",
              "description":"Check number of calls to methods in point for n calls to insertNearest().",
              "hint":"If this fails, the student is likely recomputing the distance between two points unnecessarily (for a conditional). They should compute and store the distance to use again."
            },
            {
              "test_number": "2",
              "description":"Check number of calls to methods in point for n calls to insertSmallest().",
              "hint":"If this fails, the student is likely recomputing the distance between two points unnecessarily (for a conditional). They should compute and store the distance to use again."
            },
            {
              "test_number": "3",
              "description":"Check number of calls to methods in Point when calling size() on an n-point tour.",
              "hint":"The student should not be calling any methods in Point, as they are merely determining the number of points in the tour. This likely fails due to some other runtime error (null pointer etc.)"
            },
            {
              "test_number": "4",
              "description":"Check number of calls to methods in Point when calling length() on an n-point tour.",
              "hint":"Likely off by one from the reference solution if not handling the beginning/end as elegantly as possible."
            },
            {
              "test_number": "5",
              "description":"Check number of calls to methods in Point when calling draw() on an n-point tour.",
              "hint":"Most likely draws the first line segment twice (off by one) as a result of using a do-while loop and not handling endpoints as elegantly as possible."
            },
            {
              "test_number": "6",
              "description":"Check number of calls to methods in Point when calling toString() on an n-point tour.",
              "hint":"Similar to the previous test, likely an off by one error resulting from the do-while loop."
            },
            {
              "test_number": "7",
              "description":"Time insertNearest().",
              "hint":"It appears that several submissions failed due to the test, probably related to recomputing distance more than necessary. (See timing test 1)"
            },
            {
              "test_number": "8",
              "description":"Time insertSmallest().",
              "hint":"Possibly fails due to using two loops to iterate the tour twice, or recomputing values instead of storing them. Otherwise, may fail if the method fails to run (see correctness tests)."
            },
            { 
              "test_number": "9",
              "description":"Time interleaved calls to insertnearest() and size().",
              "hint":"General timing test. See the tests above (1 and 3) for more info."
            },
            {
              "test_number": "10",
              "description":"Time interleaved calls to insertNearest() and length().",
              "hint":"General timing test. See the tests above (1 and 4) for more info."
            },
            {
              "test_number": "11",
              "description":"Time interleaved calls to insertNearest() and toString().",
              "hint":"General timing test. See the tests above (1 and 5) for more info."
            }
          ]
        }
      ]
    }
  ]
}